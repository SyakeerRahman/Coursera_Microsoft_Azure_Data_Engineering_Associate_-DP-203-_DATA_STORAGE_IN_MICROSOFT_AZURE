When designing an app
that needs to store data, it's important to
think about how the app is going
to organize data across Microsoft Azure
storage accounts, containers, and blobs. A single storage
account is flexible enough to organize your
blobs however you like. You should use additional
storage accounts as necessary to logically separate costs and control
access to data. The nature of your app and the
data that it stores should drive your strategy for naming and organizing
containers and blobs. Apps using blobs as part of a storage scheme that includes a database often don't need to rely heavily on organization, naming, or metadata to indicate anything
about their data. Such apps commonly use
identifiers like GUIDs as blob names and reference these identifiers in
database records. The app will use the
database to determine where blobs are stored and the
kind of data they contain. Other apps may use Azure
Blob Storage more like a personal file system where container and blob names are used to indicate
meaning and structure. Blob names in these
kinds of apps will often look like
traditional filenames. They include file
name extensions like.JPEG to indicate what
kind of data they contain. Finally, they'll use
virtual directories to organize blobs and will frequently use metadata tags to store information about
blobs and containers. There are a few key
things to consider when deciding how to organize and
store blobs and containers. Container and blob names must
conform to a set of rules, including length limitations
and character restrictions. By default, all blobs require
authentication to access. However, individual containers
can be configured to allow public downloading of their blobs without
authentication. This feature supports
many use cases, such as hosting static website
assets and sharing files. This is because downloading
blob contents works the same way as reading any other kind of
data over the web. You just point a browser
or anything that can make a GET request
at the blob URL. Enabling public access
is important for scalability because
data downloaded directly from blob
storage doesn't generate any traffic in
your server-side app. Even if you don't immediately take advantage of public access, or if you will use a database to control data access
via your app, plan on using separate
containers for data that you want to
be publicly available. Blobs in a container
configured for public access can be downloaded without any kind of
authentication or auditing by anyone who
knows their storage URLs. Finally, never put blob data in a public container that you don't intend to share publicly. In addition to public access, Azure has a shared access
signature feature that allows fine-grained permissions
control on containers. Don't forget the
Precision Access Control enables scenarios that
further improved scalability. Thinking about
containers, a security boundaries in general
is a helpful guideline. Technically, containers
are flat and do not support any kind of
nesting or hierarchy. But, if you give your blobs hierarchical names
that look like file paths such as
finance/budget//2017/q1.xls, the API's listing operation can filter results to
specific prefixes. This enables you to navigate
the list as if it were a hierarchical system
of files and folders. This feature is often called Virtual Directories
because some tools and Client Libraries use
it to visualize and navigate blob storage as
if it were a file system. Each folder navigation triggers a separate call to list
the blobs in that folder. Using names that are like
filenames for blobs is a common technique
for organizing and navigating
complex blob data. There are three
different kinds of blobs you can store data in. They are block blobs, append and page blobs. Block blobs are
composed of blocks of different sizes that can be uploaded independently
and in parallel. Writing to a block blob
involves uploading data to blocks and
committing them to the blob. The block is the smallest
amount of data that can be read or written as
an individual unit. Block blobs are best
used to store discrete, large binary objects that
change infrequently. Append blobs are
specialized block blobs that support only
appending new data, not updating or
deleting existing data. But they're very
efficient at it. Append blobs are great
for scenarios like storing logs are
writing streamed data. Finally, page blobs
are designed for scenarios that involve random
access reads and writes. Page blobs are used to store the virtual hard disk
or VHD files used by Azure Virtual Machines
but they're great for any scenario that
involves random access. Block blobs are the best
choice for most scenarios that don't specifically call
for append or page blobs. Their block-based
structure supports very fast uploads and downloads and efficient access to individual pieces of a blob. The process of managing
and committing blocks is automatically handled
by most Client Libraries. Some will also handle parallel uploads and downloads
to maximize performance.