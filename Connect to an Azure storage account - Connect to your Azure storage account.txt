Hello and welcome
to this lesson. You have added the required
Client Libraries to your application
and are ready to connect to your Azure
storage account. To work with data in
a storage account, your app will need
two pieces of data; access key and
REST API endpoint. Each storage account has two unique access keys that are used to secure
the storage account. If your app needs to connect to multiple storage accounts, your app will require an access key for
each storage account. In addition to access keys for authentication to
storage accounts, your app will need to know the storage service endpoints
to issue the REST requests. The REST endpoint
is a combination of your storage account
name, the data type, and a known domain, for example, blobs, queues, table, and files. If you have a custom
domain tied to Azure, then you can also create a custom domain URL
for the endpoint. Next up is storage account
connection strings. The simplest way to handle
access keys and endpoint URLs within applications is to use storage account
connection strings. A connection string
provides all needed connectivity information
in a single text string. Azure storage connection strings looks similar to the
example provided, but with the access
key and account name of your specific
storage account. There are several
best practices to follow when working with
secure access keys. Access keys are critical to providing access to
your storage account, and as a result, should not be given to
any system or person that you do not want to have access
to your storage account. Remember that access keys are the equivalent of a username and password to access
your computer. Typically, storage account connectivity
information is stored within an environment
variable database or configuration file. It is important to
note that storing this information in a
configuration file can be dangerous if you
include that file in source control and store
it in a public repository. Don't forget that doing
so is a common mistake. It means that anyone can
browse your source code in the public repository and see your storage account
connection information. Each storage account
has two access keys. The reason for this is to allow keys to be rotated
or regenerated periodically as part of security best practice in keeping
your storage account secure. This process can be done
from the Azure Portal, or the Azure CLI, or PowerShell command-line tool. Rotating a key will invalidate the original
key value immediately, and will revoke access to anyone who obtained the
key inappropriately. With support for two keys, you can rotate keys
without causing downtime in your
applications that use them. Your app can switch to using the alternate access key while the other key
is regenerated. If you have multiple apps
using this storage account, they should all use the same key to support this technique. Let's run through
the basic idea. First, update the
connection strings in your application
code to reference the secondary access key
of the storage account. Next, regenerate the
primary access key for your storage account using the Azure Portal or
command-line tool. Then, update the
connection strings in your code to reference the
new primary access key. Finally, regenerate the secondary access
key in the same manner. It's highly recommended
that you periodically rotate your access keys to
ensure they remain private, just like changing
your passwords. If you are using the key
in a server application, you can use an Azure Key Vault to store the access key for you. Key Vaults include support
to synchronize directly to the storage account and automatically rotate
the keys periodically. Finally, using a Key Vault provides an additional
layer of security, so your app never has to work directly with
an access key. You can also maintain a secure account with
shared access signatures. Access keys are the
easiest approach to authenticating access
to a storage account. They provide full access to anything in the
storage account, like a root password
on a computer. Storage accounts offer a separate
authentication mechanism called shared access signatures that support exploration
and limited permissions for scenarios where you need
to grant limited access. You should use this approach
when you are allowing other users to read and write data to your
storage account. There are links to
our documentation on this advanced topic at
the end of the module.